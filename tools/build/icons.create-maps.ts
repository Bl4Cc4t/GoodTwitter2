import yaml, { type Scalar, type YAMLMap } from "yaml"
import path from "path"
import fs from "fs"

/**
 * Interface for the icon.
 */
interface Icon {
    description?: string
    "2014-rosetta"?: string
    "2017-edge"?: string
    2022: string
}

/**
 * The icon sets.
 */
type IconSet = "2014-rosetta" | "2017-edge" | "2022"

async function checkForMissingIconMappings(iconSetPath: string, icons: Icon[]) {
    const files = await fs.promises.readdir(path.resolve(iconSetPath))
    const missingIcons: string[] = []
    for (const file of files) {
        if (!icons.find(e => e["2022"] == file.replace(".svg", ""))) {
            missingIcons.push(file)
        }
    }

    if (missingIcons.length) {
        console.warn(`The following files are missing a mapping: \n${missingIcons.map(e => `- ${e}`).join("\n")}`)
    }
}

/**
 * Get all icons from mapping file.
 * @param mappingFile the path to the mapping file
 */
function getIcons(mappingFile: string): Icon[] {
    let filePath = path.resolve(mappingFile)
    const file = fs.readFileSync(filePath, "utf8")
    const yamlMap = yaml.parseDocument(file).get("mapping") as YAMLMap<Scalar, YAMLMap<Scalar, Scalar>>

    const icons = yamlMap.items.map(e => ({
        description: e.value.get("desc")?.toString(),
        "2014-rosetta": e.value.get(2014)?.toString(),
        "2017-edge": e.value.get(2017)?.toString(),
        "2022": e.key.toString()
    }))

    // sort by name
    icons.sort((a, b) => a["2022"].localeCompare(b["2022"]))
    return icons
}

function getAutoGeneratedString(subject: string): string {
    return `This ${subject} was auto generated with ${path.basename(__filename)} on ${new Date().toISOString()}`
}

/**
 * Creates the SCSS file for an icon set.
 * @param icons the icons
 * @param set the name of the icon set
 * @param scssPath the path where to put the file
 */
function createScss(scssPath: string, icons: Icon[], set: IconSet): void {
    let fileContent =
        `// ${getAutoGeneratedString("file")}\n` +
        `@import "../util/mixins";\n` +
        `\n` +
        `@mixin icons-${set} {\n`

    for (const icon of icons.filter(e => e[set])) {
        fileContent += `    @include svg-override("2022/${icon["2022"]}", "${set}/${icon[set]}");\n`
    }
    fileContent += `}\n`

    fs.writeFileSync(path.resolve(scssPath, `icons-${set}.scss`), fileContent)
}

/**
 * Updates the icon overview table in the markdown documentation file.
 * @param filePath the markdown file to update
 * @param icons the icons
 */
function updateDocumentationIconOverviewTable(filePath: string, icons: Icon[]) {
    filePath = path.resolve(filePath)
    let fileContent = fs.readFileSync(filePath, { encoding: "utf8" })

    let tableContent =
        `<!-- ${getAutoGeneratedString("table")} -->\n` +
        `| Name | 2014 | 2017 | 2022 | Description |\n` +
        `|-|-|-|-|-|\n`

    for (const icon of icons) {
        tableContent +=
            `| ${icon["2022"]} ` +
            `| ${getIconImg(icon, "2014-rosetta")} ` +
            `| ${getIconImg(icon, "2017-edge")} ` +
            `| ${getIconImg(icon, "2022")} ` +
            `| ${icon.description ?? ""} ` +
            `|\n`
    }

    fileContent = fileContent.replace(
        /(<!-- icon-mapping-table start -->)[\s\S]*(<!-- icon-mapping-table end -->)/,
        `$1\n${tableContent}\n$2`)
    fs.writeFileSync(filePath, fileContent)

    function getIconImg(icon: Icon, set: IconSet): string {
        return icon[set] ? `<img src="../icon/${set}/${icon[set]}.svg" height="48" >` : ""
    }
}

/**
 * This file should be executed from the project root
 */
(async () => {
    const icons = getIcons("icon/mapping.yml")

    await checkForMissingIconMappings("icon/2022", icons)
    createScss("src/style/common", icons, "2014-rosetta")
    createScss("src/style/common", icons, "2017-edge")
    updateDocumentationIconOverviewTable("doc/icons.md", icons)
})()
